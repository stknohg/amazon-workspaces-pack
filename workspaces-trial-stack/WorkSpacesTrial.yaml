AWSTemplateFormatVersion: 2010-09-09
Parameters:
  SystemName:
    Description: "Your system name"
    Type: String
    MinLength: 1
    MaxLength: 10
    AllowedPattern: "^[a-zA-Z0-9]+$"
    Default: "workspaces"
  EnvironmentName:
    Description: "Your environment name"
    Type: String
    MinLength: 1
    MaxLength: 10
    AllowedPattern: "^[a-zA-Z0-9]+$"
    Default: "trial"
  AZ1:
    Description: "public subnet1 AZ name"
    Type: AWS::EC2::AvailabilityZone::Name
  AZ2:
    Description: "public subnet2 AZ name"
    Type: AWS::EC2::AvailabilityZone::Name
  KeyPairName:
    Description: "EC2 keypair name"
    Type: AWS::EC2::KeyPair::KeyName
  WindowsLatestAmi:
    Description: "EC2 AMI image SSM path"
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-Japanese-Full-Base
    AllowedValues:
      - /aws/service/ami-windows-latest/Windows_Server-2019-Japanese-Full-Base
      - /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base
  MaintenanceCIDR:
    Description: "Maintenance location CIDR (set http://checkip.amazonaws.com/ result IP)"
    Type: String
    MinLength: 9
    MaxLength: 19
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: "1.2.3.4/32"
  DomainDNSName:
    Description: "Your active directory domain name"
    Type: String
    MinLength: 2
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z0-9.]+$"
    Default: "corp.contoso.com"
  DomainNetBIOSName:
    Description: "Your active directory NetBIOS name"
    Type: String
    MinLength: 1
    MaxLength: 15
    AllowedPattern: "^[a-zA-Z0-9]+$"
    Default: "corp"
  DomainSafeModePassword:
    Description: "DSRM administrator password (plain text, meet complexity requirements)"
    Type: String
    MinLength: 8
    MaxLength: 256
    Default: "P@ssword"
  ADConnectorPassword:
    Description: "AD Connector user password (plain text, meet complexity requirements)"
    Type: String
    MinLength: 8
    MaxLength: 256
    Default: "P@ssword"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Basic parameters"
        Parameters:
          - SystemName
          - EnvironmentName
      - Label:
          default: "VPC parameters"
        Parameters:
          - AZ1
          - AZ2
      - Label:
          default: "EC2 parameters"
        Parameters:
          - KeyPairName
          - WindowsLatestAmi
          - MaintenanceCIDR
      - Label:
          default: "Active Directory parameters"
        Parameters:
          - DomainDNSName
          - DomainNetBIOSName
          - DomainSafeModePassword
          - ADConnectorPassword
Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${SystemName}-${EnvironmentName}-vpc"
  # Internet Gateway
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${SystemName}-${EnvironmentName}-igw"
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: IGW
  # Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AZ1
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${SystemName}-${EnvironmentName}-public-subnet1"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AZ2
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${SystemName}-${EnvironmentName}-public-subnet2"
  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${SystemName}-${EnvironmentName}-public-rtb"
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: IGW
  PublicRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2

  # Security Group
  MaintenanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: "${SystemName}-${EnvironmentName}-maintenance-sg"
      GroupDescription: "Security group for maintenance"
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - Description: "RDP from your Environment"
          IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp:
            Ref: MaintenanceCIDR
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${SystemName}-${EnvironmentName}-maintenance-sg"
  # ref : https://docs.aws.amazon.com/ja_jp/directoryservice/latest/admin-guide/ms_ad_getting_started_what_gets_created.html
  ADDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: "${SystemName}-${EnvironmentName}-adds-sg"
      GroupDescription: "Security group for domain controller(ADDS)"
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 88
          ToPort: 88
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: udp
          FromPort: 88
          ToPort: 88
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 389
          ToPort: 389
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: udp
          FromPort: 389
          ToPort: 389
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: udp
          FromPort: 445
          ToPort: 445
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 464
          ToPort: 464
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: udp
          FromPort: 464
          ToPort: 464
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 135
          ToPort: 135
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 636
          ToPort: 636
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 1024
          ToPort: 65535
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: tcp
          FromPort: 3268
          ToPort: 3269
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
        - IpProtocol: udp
          FromPort: 138
          ToPort: 138
          CidrIp:
            Fn::GetAtt: VPC.CidrBlock
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${SystemName}-${EnvironmentName}-adds-sg"
  ADDSSGSelfRefIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt: ADDSSG.GroupId
      IpProtocol: "-1"
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId:
        Fn::GetAtt: ADDSSG.GroupId

  # IAM Role
  WorkSpacesEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: "${SystemName}-${EnvironmentName}-workspaces-admin-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName:
            Fn::Sub: "${SystemName}-${EnvironmentName}-ws-administrator"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - workspaces:*
                  - ds:*
                  - iam:PassRole
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:PutRolePolicy
                  - kms:ListAliases
                  - kms:ListKeys
                  - ec2:CreateVpc
                  - ec2:CreateSubnet
                  - ec2:CreateNetworkInterface
                  - ec2:CreateInternetGateway
                  - ec2:CreateRouteTable
                  - ec2:CreateRoute
                  - ec2:CreateTags
                  - ec2:CreateSecurityGroup
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeRouteTables
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeAvailabilityZones
                  - ec2:AttachInternetGateway
                  - ec2:AssociateRouteTable
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:DeleteSecurityGroup
                  - ec2:DeleteNetworkInterface
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - workdocs:RegisterDirectory
                  - workdocs:DeregisterDirectory
                  - workdocs:AddUserToGroup
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:AttachRolePolicy
                  - iam:ListRolePolicies
                  - iam:DeleteRole
                Resource:
                  Fn::Sub: "arn:aws:iam::${AWS::AccountId}:role/workspaces_DefaultRole"
  # Instance Profile
  WorkSpacesEC2RoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Sub: "${SystemName}-${EnvironmentName}-workspaces-admin-role"
      Path: /
      Roles:
        - Ref: WorkSpacesEC2Role

  # EC2 Instance (Bastion and ADDS)
  ADDSEC2:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ascending:
            - config0
            - config1
            - config2
        config0:
          files:
            C:\cfn\install-winfeatures.ps1:
              content: |
                Add-WindowsFeature AD-Domain-Services, GPMC, RSAT-ADDS, RSAT-AD-PowerShell, RSAT-DNS-Server | Format-List
            C:\cfn\install-adds.ps1:
              content:
                Fn::Sub: |
                  Import-Module ADDSDeployment
                  $params = @{
                      DomainName        = '${DomainDNSName}';
                      DomainNetbiosName = '${DomainNetBIOSName}';
                      ForestMode        = 'WinThreshold';
                      DomainMode        = 'WinThreshold';
                      DatabasePath      = 'C:\Windows\NTDS';
                      LogPath           = 'C:\Windows\NTDS';
                      SysvolPath        = 'C:\Windows\SYSVOL';
                      SafeModeAdministratorPassword = (ConvertTo-SecureString '${DomainSafeModePassword}' -AsPlainText -Force);
                      InstallDns           = $true;
                      CreateDnsDelegation  = $false;
                      NoRebootOnCompletion = $false;
                      Confirm = $false;
                  }
                  Install-ADDSForest @params
            C:\cfn\add-adusers.ps1:
              content:
                Fn::Sub: |
                  # Immediately after installed Domain Forest, we must wait about 5 minutes...
                  Write-Output ('{0} : Checking Active Directory is avaialbe...' -f (Get-Date))
                  $isADAvailable = $true
                  do {
                      Start-Sleep -Seconds 10
                      try {
                          Import-Module ActiveDirectory > $null
                          Get-ADDomainController > $null
                          $isADAvailable = $true
                      } catch {
                          $isADAvailable = $false
                      }
                  } until ($isADAvailable)

                  Write-Output ('{0} : Adding AD Connector user...' -f (Get-Date))
                  $params = @{
                      Name                 = 'adconnector';
                      UserPrincipalName    = 'adconnector@${DomainDNSName}';
                      Description          = 'AWS AD Connector service user';
                      AccountPassword      = ConvertTo-SecureString -AsPlainText '${ADConnectorPassword}' -Force;
                      Enabled              = $true;
                      PasswordNeverExpires = $true;
                  }
                  New-ADUser @params
                  Add-ADGroupMember -Identity 'Domain Admins' -Members 'adconnector'

                  Write-Output ('{0} : Adding test users...' -f (Get-Date))
                  New-ADOrganizationalUnit -Name 'TestUsers'
                  $ou = Get-ADOrganizationalUnit -Filter 'Name -eq "TestUsers"'
                  @(
                      [PSCustomObject]@{ Name='user01'; PlainPassword = 'P@ssw0rd'; },
                      [PSCustomObject]@{ Name='user02'; PlainPassword = 'P@ssw0rd'; },
                      [PSCustomObject]@{ Name='user03'; PlainPassword = 'P@ssw0rd'; },
                      [PSCustomObject]@{ Name='user04'; PlainPassword = 'P@ssw0rd'; },
                      [PSCustomObject]@{ Name='user05'; PlainPassword = 'P@ssw0rd'; },
                      [PSCustomObject]@{ Name='user06'; PlainPassword = 'P@ssw0rd'; },
                      [PSCustomObject]@{ Name='user07'; PlainPassword = 'P@ssw0rd'; },
                      [PSCustomObject]@{ Name='user08'; PlainPassword = 'P@ssw0rd'; },
                      [PSCustomObject]@{ Name='user09'; PlainPassword = 'P@ssw0rd'; },
                      [PSCustomObject]@{ Name='user10'; PlainPassword = 'P@ssw0rd'; }
                  ) | ForEach-Object {
                      $params = @{
                          Name                 = $_.Name;
                          UserPrincipalName    = ("{0}@${DomainDNSName}" -f $_.Name);
                          Description          = ("Test user {0}" -f $_.Name);
                          AccountPassword      = ConvertTo-SecureString $_.PlainPassword -AsPlainText -Force;
                          PasswordNeverExpires = $true;
                          Path = $ou.DistinguishedName;
                          Enabled = $true;
                      }
                      New-ADUser @Params
                  }
            C:\cfn\install-shortcuts.ps1:
              content: |
                # Create shortcuts
                $shell = New-Object -ComObject WScript.Shell
                @(
                    @{Link = 'C:\Users\Public\Desktop\Logoff.lnk'; TargetPath = 'C:\Windows\System32\logoff.exe'; IconLocation = 'shell32.dll,27'},
                    @{Link = 'C:\Users\Public\Desktop\README.lnk'; TargetPath = 'C:\WorkSpacesTools\README.txt'; IconLocation = 'C:\WorkSpacesTools\README.txt'},
                    @{Link = 'C:\Users\Public\Desktop\WorkSpacesTools.lnk'; TargetPath = 'C:\WorkSpacesTools\'; IconLocation = 'imageres.dll,3'}
                ) | ForEach-Object {
                    $s = $shell.CreateShortcut($_.Link)
                    $s.TargetPath = $_.TargetPath
                    $s.WorkingDirectory = [IO.Path]::GetDirectoryName($_.TargetPath)
                    $s.IconLocation = $_.IconLocation
                    $s.Save()
                }
            C:\WorkSpacesTools\01-cretate-adconnector.ps1:
              content:
                Fn::Sub: |
                  Write-Output ('{0} : Start Creating AD Connector...' -f (Get-Date))
                  Set-DefaultAWSRegion -Region ${AWS::Region}
                  $params = @{
                      Name = '${DomainDNSName}'
                      ConnectSettings_CustomerUserName  = 'adconnector'
                      Password = '${ADConnectorPassword}'
                      ConnectSettings_CustomerDnsIp = (Get-NetAdapter | Get-NetIPAddress -AddressFamily IPv4 | Select-Object -ExpandProperty IPAddress -First 1)
                      Description = 'AD Connector for WorkSpaces'
                      Size = 'Small'
                      ConnectSettings_VpcId = '${VPC}'
                      ConnectSettings_SubnetId = ('${PublicSubnet1}', '${PublicSubnet2}')
                  }
                  $directoryID = Connect-DSDirectory @params
                  $directoryID > C:\WorkSpacesTools\adconnector.id.txt

                  Write-Output ('{0} : Waiting for Creation Complete...' -f (Get-Date))
                  do {
                      Start-Sleep -Seconds 10
                      $result = Get-DSDirectory -DirectoryId $directoryID
                  } until ($result.Stage.Value -eq 'Active')
                  Write-Output ('{0} : Directory {1} is created!' -f (Get-Date), $directoryID)
            C:\WorkSpacesTools\02-register-workspacesdirectory.ps1:
              content:
                Fn::Sub: |
                  $directoryID = Get-Content -LiteralPath C:\WorkSpacesTools\adconnector.id.txt
                  if ($null -eq $directoryID) {
                      Write-Error "Failed to get directoryID."
                      return
                  }

                  try {
                      [void](Get-IAMRole -RoleName 'workspaces_DefaultRole')
                      Write-Output 'workspaces_DefaultRole role is already exists. Skip creating workspaces_DefaultRole...'
                  } catch {
                      Write-Output 'Start creating workspaces_DefaultRole role...'
                      $params = @{
                          RoleName  = 'workspaces_DefaultRole'
                          Description = 'WorkSpaces default role created by user. (not by console!)'
                          AssumeRolePolicyDocument = 
                  @'
                  {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": "workspaces.amazonaws.com"
                          },
                          "Action": "sts:AssumeRole"
                          }
                      ]
                      }
                  '@
                      }
                      $role = New-IAMRole @params
                      Register-IAMRolePolicy -RoleName $role.RoleName -PolicyArn 'arn:aws:iam::aws:policy/AmazonWorkSpacesServiceAccess'
                      Register-IAMRolePolicy -RoleName $role.RoleName -PolicyArn 'arn:aws:iam::aws:policy/AmazonWorkSpacesSelfServiceAccess'
                  }

                  Write-Output ('{0} : Register WorkSpaces...' -f (Get-Date))
                  Set-DefaultAWSRegion -Region ${AWS::Region}
                  $params = @{
                      DirectoryId = $directoryID
                      SubnetId = ('${PublicSubnet1}', '${PublicSubnet2}')
                      EnableSelfService = $true
                      EnableWorkDoc = $false
                  }
                  Register-WKSWorkspaceDirectory @params
                  Write-Output ('{0} : Registration complete!' -f (Get-Date))
            C:\WorkSpacesTools\98-unregister-workspacesdirectory.ps1:
              content:
                Fn::Sub: |
                  $directoryID = Get-Content -LiteralPath C:\WorkSpacesTools\adconnector.id.txt
                  if ($null -eq $directoryID) {
                      Write-Error "Failed to get directoryID."
                      return
                  }

                  Write-Output ("{0} : Unregister WorkSpaces..." -f (Get-Date))
                  Set-DefaultAWSRegion -Region ${AWS::Region}
                  Unregister-WKSWorkspaceDirectory -DirectoryId $directoryID
                  Write-Output ("{0} : Unregistration Complete." -f (Get-Date))
                  Write-Output "---------------------------------------------------------------------"
                  Write-Output "If you want to remove workspaces_DefaultRole, please remove manually."
                  Write-Output "---------------------------------------------------------------------"
            C:\WorkSpacesTools\99-delete-adconnector.ps1:
              content:
                Fn::Sub: |
                  $directoryID = Get-Content -LiteralPath C:\WorkSpacesTools\adconnector.id.txt
                  if ($null -eq $directoryID) {
                      Write-Error "Failed to get directoryID."
                      return
                  }

                  Write-Output ('{0} : Delete AD Connector...' -f (Get-Date))
                  Set-DefaultAWSRegion -Region ${AWS::Region}
                  Remove-DSDirectory -DirectoryId $directoryID -Force
                  $stage = Get-DSDirectory -DirectoryId $directoryID | Select-Object -ExpandProperty Stage
                  Write-Output ('{0} : AD Connector stage is {1}...' -f (Get-Date), $stage)
                  Write-Output ('{0} : Operation complete.' -f (Get-Date))
            C:\WorkSpacesTools\README.txt:
              content: |
                # WorkSpaces initial configuration scripts
                Some scripts for creating AD Connector and WorkSpaces is saved in this folder.

                ## Create AD Connector
                - Execute 01-cretate-adconnector.ps1 .
                -- Do not delete "C:\WorkSpacesTools\adconnector.id.txt"

                ## Register AD Connector to WorkSpaces
                - Execute 02-register-workspacesdirectory.ps1 .

                ## Unregister AD Connector to WorkSpaces
                - Execute 98-unregister-workspacesdirectory.ps1 .

                ## Delete AD Connector
                - Execute 99-delete-adconnector.ps1 .
          commands:
            0-set-computer-name:
              command: powershell.exe -Command Rename-Computer 'ADDS' -Restart -Force
              waitAfterCompletion: forever
        config1:
          commands:
            0-install-winfeatures:
              command: powershell.exe -ExecutionPolicy Bypass C:\cfn\install-winfeatures.ps1
              waitAfterCompletion: 0
            1-install-active-directory:
              command: powershell.exe -ExecutionPolicy Bypass C:\cfn\install-adds.ps1
              waitAfterCompletion: forever
        config2:
          commands:
            0-add-adusers:
              command: powershell.exe -ExecutionPolicy Bypass C:\cfn\add-adusers.ps1
              waitAfterCompletion: 0
            1-install-shortcuts:
              command: powershell.exe -ExecutionPolicy Bypass C:\cfn\install-shortcuts.ps1
              waitAfterCompletion: 0
            2-signal-resource:
              command:
                Fn::Sub: |
                  cfn-signal.exe -e %ERRORLEVEL% --resource ADDSEC2 --stack ${AWS::StackName} --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Properties:
      ImageId:
        Ref: WindowsLatestAmi
      UserData:
        Fn::Base64:
          Fn::Sub: |
            <script>
            cfn-init.exe -v -s ${AWS::StackId} -r ADDSEC2 --configsets ascending --region ${AWS::Region}
            </script>
      InstanceType: t3.medium
      IamInstanceProfile:
        Ref: WorkSpacesEC2RoleInstanceProfile
      KeyName:
        Ref: KeyPairName
      DisableApiTermination: false
      EbsOptimized: false
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp3
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Ref: PublicSubnet1
          GroupSet:
            - Ref: MaintenanceSG
            - Ref: ADDSSG
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${SystemName}-${EnvironmentName}-adds"
